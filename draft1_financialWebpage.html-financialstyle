<!DOCTYPE html>
<html>
<head>
    <title>Walmart Financial Audit Report 2024</title>
    <style>
        body {
            font-family: "Arial", sans-serif;
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 20px;
            color: #333;
            background-color: #f9f9f9;
        }
        
        .audit-header {
            text-align: center;
            margin-bottom: 40px;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .audit-title {
            font-size: 24px;
            margin-bottom: 10px;
            color: #1a237e;
        }

        .audit-subtitle {
            color: #666;
            font-size: 16px;
            margin-bottom: 5px;
        }

        .audit-section {
            background: white;
            margin-bottom: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .section-header {
            background: #1a237e;
            color: white;
            padding: 15px 20px;
            font-size: 18px;
            font-weight: 600;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 12px 15px;
            border-bottom: 1px solid #eee;
        }

        th {
            background-color: #f5f5f5;
            font-weight: 600;
            color: #333;
            text-align: left;
        }

        .account-code {
            font-family: "Courier New", monospace;
            color: #1a237e;
            width: 100px;
        }

        .description {
            width: 40%;
        }

        .amount {
            font-family: "Courier New", monospace;
            text-align: right;
            width: 200px;
        }

        .total-row {
            font-weight: 600;
            background-color: #f8f9fa;
        }

        .subtotal-row {
            background-color: #fafafa;
            font-weight: 500;
        }

        .positive {
            color: #2e7d32;
        }

        .negative {
            color: #c62828;
        }

        .metric-value {
            font-weight: 600;
        }

        .notes {
            font-size: 0.9em;
            color: #666;
            font-style: italic;
        }

        .error {
            color: #dc3545;
            padding: 20px;
            background-color: #f8d7da;
            border-radius: 4px;
            margin: 20px 0;
        }
    </style>
</head>
<body>
    <div class="audit-header">
        <div class="audit-title">Walmart Inc.</div>
        <div class="audit-subtitle">Financial Audit Report</div>
        <div class="audit-subtitle">Fiscal Year 2024</div>
    </div>
    <div id="output"></div>

    <script>
        async function fetchData() {
            try {
                const response = await fetch('https://calvinw.github.io/BusMgmtBenchmarks/financial_data.csv');
                const text = await response.text();
                const rows = text.split('\n').map(row => row.split(','));
                const headers = rows[0];
                const data = rows.slice(1).filter(row => row.length > 1);
                
                const walmartData = data.filter(row => {
                    const company = row[0].toLowerCase();
                    const year = row[1];
                    return company.includes('walmart') && year === '2024';
                })[0];

                if (!walmartData) {
                    document.getElementById('output').innerHTML = `
                        <div class="error">No Walmart data found for 2024</div>`;
                    return;
                }

                const output = document.getElementById('output');

                // Revenue and Income
                output.appendChild(createSection('Revenue and Income Analysis', [
                    { code: '4000', description: 'Total Revenue', value: walmartData[headers.indexOf('revenue')], isTotal: true },
                    { code: '5000', description: 'Cost of Revenue', value: walmartData[headers.indexOf('cost_of_revenue')], isNegative: true },
                    { code: '5500', description: 'Gross Profit', value: walmartData[headers.indexOf('gross_profit')], isSubtotal: true },
                    { code: '6000', description: 'Operating Expenses', value: walmartData[headers.indexOf('operating_expenses')], isNegative: true },
                    { code: '6500', description: 'Operating Income', value: walmartData[headers.indexOf('operating_income')], isSubtotal: true },
                    { code: '7000', description: 'Net Income', value: walmartData[headers.indexOf('net_income')], isTotal: true }
                ]));

                // Assets
                output.appendChild(createSection('Asset Accounts', [
                    { code: '1000', description: 'Total Assets', value: walmartData[headers.indexOf('total_assets')], isTotal: true },
                    { code: '1100', description: 'Current Assets', value: walmartData[headers.indexOf('current_assets')] },
                    { code: '1200', description: 'Non-Current Assets', 
                      value: walmartData[headers.indexOf('total_assets')] - walmartData[headers.indexOf('current_assets')] }
                ]));

                // Liabilities and Equity
                output.appendChild(createSection('Liabilities and Equity', [
                    { code: '2000', description: 'Total Liabilities', value: walmartData[headers.indexOf('total_liabilities')], isTotal: true },
                    { code: '2100', description: 'Current Liabilities', value: walmartData[headers.indexOf('current_liabilities')] },
                    { code: '2200', description: 'Non-Current Liabilities', 
                      value: walmartData[headers.indexOf('total_liabilities')] - walmartData[headers.indexOf('current_liabilities')] },
                    { code: '3000', description: "Total Shareholders' Equity", value: walmartData[headers.indexOf('total_equity')], isTotal: true }
                ]));

                // Financial Ratios
                output.appendChild(createSection('Key Financial Ratios', [
                    { code: 'R100', description: 'Current Ratio', value: walmartData[headers.indexOf('current_ratio')], isRatio: true },
                    { code: 'R200', description: 'Debt to Equity Ratio', value: walmartData[headers.indexOf('debt_to_equity')], isRatio: true },
                    { code: 'R300', description: 'Profit Margin', value: walmartData[headers.indexOf('profit_margin')], isRatio: true },
                    { code: 'R400', description: 'Return on Assets (ROA)', value: walmartData[headers.indexOf('return_on_assets')], isRatio: true },
                    { code: 'R500', description: 'Return on Equity (ROE)', value: walmartData[headers.indexOf('return_on_equity')], isRatio: true }
                ]));

            } catch (error) {
                document.getElementById('output').innerHTML = `
                    <div class="error">Error fetching data: ${error.message}</div>`;
            }
        }

        function createSection(title, items) {
            const section = document.createElement('div');
            section.className = 'audit-section';
            
            const header = document.createElement('div');
            header.className = 'section-header';
            header.textContent = title;
            section.appendChild(header);

            const table = document.createElement('table');
            
            // Table headers
            const headerRow = document.createElement('tr');
            ['Account Code', 'Description', 'Amount'].forEach(text => {
                const th = document.createElement('th');
                th.textContent = text;
                headerRow.appendChild(th);
            });
            table.appendChild(headerRow);
            
            items.forEach(item => {
                const row = document.createElement('tr');
                if (item.isTotal) row.className = 'total-row';
                if (item.isSubtotal) row.className = 'subtotal-row';
                
                // Account code
                const codeCell = document.createElement('td');
                codeCell.className = 'account-code';
                codeCell.textContent = item.code;
                row.appendChild(codeCell);
                
                // Description
                const descCell = document.createElement('td');
                descCell.className = 'description';
                descCell.textContent = item.description;
                row.appendChild(descCell);
                
                // Amount
                const valueCell = document.createElement('td');
                valueCell.className = 'amount';
                
                if (item.value !== undefined) {
                    const value = parseFloat(item.value);
                    if (item.isRatio) {
                        valueCell.textContent = value.toFixed(2);
                    } else {
                        valueCell.textContent = value.toLocaleString('en-US', {
                            style: 'decimal',
                            maximumFractionDigits: 0
                        });
                        if (item.isNegative) {
                            valueCell.textContent = '(' + valueCell.textContent + ')';
                            valueCell.classList.add('negative');
                        } else if (!item.isRatio) {
                            valueCell.classList.add('positive');
                        }
                    }
                }
                
                row.appendChild(valueCell);
                table.appendChild(row);
            });
            
            section.appendChild(table);
            return section;
        }

        fetchData();
    </script>
</body>
</html>
